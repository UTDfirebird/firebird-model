import torch
from transformers import DistilBertTokenizer, DistilBertForSequenceClassification
import json

# fake example data
parsed_data = {
    "12345": "Breaking: Major earthquake in California!",
    "67890": "Just a normal sunny day at the beach.",
}

# mount drive (for current use)
from google.colab import drive
drive.mount('/content/drive')

# define path
path = "/content/drive/MyDrive/models/disaster_classifierV2"  # adjust to whatever path is used in hosting service

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# load tokenizer and trained model
try:
    tokenizer = DistilBertTokenizer.from_pretrained(path)
    model = DistilBertForSequenceClassification.from_pretrained(path)
    model.to(device)
    model.eval()
except Exception as e:
    print(f"Error loading model/tokenizer: {e}")
    exit()

# tokenize text for processing
def preprocess_text(text):
    return tokenizer(text, truncation=True, padding=True, max_length=512, return_tensors="pt").to(device)

# classify tweet and return confidence scores
def classify_tweet(text): 
    inputs = preprocess_text(text)
    with torch.no_grad():
        outputs = model(**inputs)
    logits = outputs.logits[0].cpu().numpy()

    # convert logits to probabilities using softmax
    probabilities = torch.nn.functional.softmax(torch.tensor(logits), dim=-1).numpy()

    # get predicted category
    predicted_class = torch.argmax(torch.tensor(probabilities)).item()

    return predicted_class, probabilities.tolist()

# process data (parse JSON, extract tweets, classify them)
def process_server_data(tweetDict):
    results = {}
    for tweetID, text in tweetDict.items():
        if text:  # ensure the text is not empty
            category, confidence_scores = classify_tweet(text)
            results[tweetID] = confidence_scores
    return results

# process parsed data
classification_results = process_server_data(parsed_data)  

# print results
for tweetID, confidence_scores in classification_results.items():
    print(f"Tweet ID: {tweetID}")
    print(f"Confidence Scores: {confidence_scores}")
    print("-" * 50)
